// <auto-generated />
using System;
using JOBZONE;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JOBZONE.Migrations
{
    [DbContext(typeof(DbJobZoneContext))]
    [Migration("20231022221850_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JOBZONE.Models.Applied", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("OfferID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Applied");
                });

            modelBuilder.Entity("JOBZONE.Models.CertificateModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CertificateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TrainingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("CertificateModel");
                });

            modelBuilder.Entity("JOBZONE.Models.EducationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Peroid")
                        .HasColumnType("datetime2");

                    b.Property<string>("Proffesion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("EducationModel");
                });

            modelBuilder.Entity("JOBZONE.Models.JobExperienceModel", b =>
                {
                    b.Property<int>("JobExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobExperienceId"), 1L, 1);

                    b.Property<string>("ComapnyLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmployedSince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EmployedTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobFunction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsibilites")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("JobExperienceId");

                    b.HasIndex("UserId");

                    b.ToTable("JobExperienceModel");
                });

            modelBuilder.Entity("JOBZONE.Models.LanguageModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("LanguageModel");
                });

            modelBuilder.Entity("JOBZONE.Models.LinksModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("LinksModel");
                });

            modelBuilder.Entity("JOBZONE.Models.RecentlyViewedModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("OfferID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("RecentlyViewedModel");
                });

            modelBuilder.Entity("JOBZONE.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("ActaulJobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActualJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobExperienceDescripton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialSkill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JOBZONE.Models.Applied", b =>
                {
                    b.HasOne("JOBZONE.Models.UserModel", "UserModel")
                        .WithMany("Applied")
                        .HasForeignKey("UserId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("JOBZONE.Models.CertificateModel", b =>
                {
                    b.HasOne("JOBZONE.Models.UserModel", "UserModel")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("JOBZONE.Models.EducationModel", b =>
                {
                    b.HasOne("JOBZONE.Models.UserModel", "UserModel")
                        .WithMany("Education")
                        .HasForeignKey("UserId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("JOBZONE.Models.JobExperienceModel", b =>
                {
                    b.HasOne("JOBZONE.Models.UserModel", "UserModel")
                        .WithMany("JobExperince")
                        .HasForeignKey("UserId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("JOBZONE.Models.LanguageModel", b =>
                {
                    b.HasOne("JOBZONE.Models.UserModel", "UserModel")
                        .WithMany("Languages")
                        .HasForeignKey("UserId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("JOBZONE.Models.LinksModel", b =>
                {
                    b.HasOne("JOBZONE.Models.UserModel", "UserModel")
                        .WithMany("Links")
                        .HasForeignKey("UserId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("JOBZONE.Models.RecentlyViewedModel", b =>
                {
                    b.HasOne("JOBZONE.Models.UserModel", "UserModel")
                        .WithMany("RecentlyVieved")
                        .HasForeignKey("UserId");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("JOBZONE.Models.UserModel", b =>
                {
                    b.Navigation("Applied");

                    b.Navigation("Certificates");

                    b.Navigation("Education");

                    b.Navigation("JobExperince");

                    b.Navigation("Languages");

                    b.Navigation("Links");

                    b.Navigation("RecentlyVieved");
                });
#pragma warning restore 612, 618
        }
    }
}
